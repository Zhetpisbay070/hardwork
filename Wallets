package main

import (
	"errors"
	"fmt"
)

type WalletInterface interface {
	Deposit(amount float64) error
	Withdraw(amount float64) error
	Transfer(to WalletInterface, amount float64) error
	DepositGas(amount float64) error
	GetCurrency() string
}
type Wallet1 struct {
	Currency string
	Balance  float64
}
type Wallet2 struct {
	Currency string
	Balance  float64
}
type CryptoWallet struct {
	Currency string
	Balance  float64
	Gas      float64
}

const commissionOfBank = 10
const gasFee = 0.001

func (w *Wallet1) GetCurrency() string {
	return w.Currency
}

func (w *Wallet2) GetCurrency() string {
	return w.Currency
}

func (w *CryptoWallet) GetCurrency() string {
	return w.Currency
}

func (w *Wallet1) DepositGas(amount float64) error {
	return errors.New("gas is not supported for this wallet type")

}

func (w *Wallet2) DepositGas(amount float64) error {
	return errors.New("gas is not supported for this wallet type")
}

func (w *CryptoWallet) DepositGas(amount float64) error {
	if amount <= 0 {
		return errors.New("gas amount must be greater than zero")
	}
	w.Gas += amount

	return nil
}

func (w *Wallet1) Deposit(amount float64) error {
	if amount <= 0 {
		return errors.New("amount must be greater than zero")
	}
	w.Balance += amount

	return nil
}

func (w *Wallet2) Deposit(amount float64) error {
	if amount <= 0 {
		return errors.New("amount must be greater than zero")
	}
	w.Balance += amount

	return nil
}

func (w *CryptoWallet) Deposit(amount float64) error {
	if amount <= 0 {
		return errors.New("amount must be greater than zero")
	}
	w.Balance += amount

	return nil
}

func (w *Wallet1) Withdraw(amount float64) error {
	if amount > w.Balance {
		return errors.New("amount must be less than balance")
	}
	if amount < 0 {
		return fmt.Errorf("amount must be greater to zero")
	}
	w.Balance -= commissionOfBank
	w.Balance -= amount

	return nil
}

func (w *Wallet2) Withdraw(amount float64) error {
	if amount > w.Balance {
		return errors.New("amount must be less than balance")
	}
	if amount < 0 {
		return fmt.Errorf("amount must be greater to zero")
	}
	w.Balance -= commissionOfBank
	w.Balance -= amount

	return nil
}

func (w *CryptoWallet) Withdraw(amount float64) error {
	if amount > w.Balance {
		return errors.New("amount must be less than balance")
	}
	if amount < 0 {
		return fmt.Errorf("amount must be greater to zero")
	}
	w.Gas -= gasFee
	w.Balance -= amount

	return nil
}

func (w *Wallet1) Transfer(to WalletInterface, amount float64) error {
	if amount > w.Balance {
		return errors.New("no balance to transfer")
	} else if amount <= 0 {
		return errors.New("amount must be greater than zero")
	}
	if w.Currency != to.GetCurrency() {
		return errors.New("currency not supported")
	}
	w.Balance -= commissionOfBank
	w.Balance -= amount

	return to.Deposit(amount)

}

func (w *Wallet2) Transfer(to WalletInterface, amount float64) error {
	if amount > w.Balance {
		return errors.New("no balance to transfer")
	} else if amount <= 0 {
		return errors.New("amount must be greater than zero")
	}
	if w.Currency != to.GetCurrency() {
		return errors.New("currency not supported")
	}
	w.Balance -= commissionOfBank
	w.Balance -= amount

	return to.Deposit(amount)
}

func (w *CryptoWallet) Transfer(to WalletInterface, amount float64) error {
	const gasFee = 0.001
	if amount > w.Balance {
		return errors.New("no balance to transfer")
	} else if amount <= 0 {
		return errors.New("amount must be greater than zero")
	}
	if w.Currency != to.GetCurrency() {
		return errors.New("currency not supported")
	}
	w.Gas -= gasFee
	w.Balance -= amount

	return to.Deposit(amount)
}

func main() {
	w1 := &Wallet1{
		Currency: "USD",
		Balance:  100,
	}

	w2 := &Wallet2{
		Currency: "USD",
		Balance:  200,
	}

	w3 := &CryptoWallet{
		Currency: "BTC",
		Balance:  10,
	}

	errDep := w1.Deposit(500)

	if errDep != nil {
		fmt.Println("Deposit failed:", errDep)
	}

	errWithd := w1.Withdraw(300)

	if errWithd != nil {
		fmt.Println("Withdraw failed:", errWithd)
	}

	errTrans := w1.Transfer(w2, 50)

	if errTrans != nil {
		panic(errTrans)
	}
	fmt.Println("1st wallet balance:", w1)

	errDep2 := w2.Deposit(500)

	if errDep2 != nil {
		fmt.Println("Deposit failed:", errDep2)
	}

	errWithd2 := w2.Withdraw(300)

	if errWithd2 != nil {
		fmt.Println("Withdraw failed:", errWithd2)
	}

	//errTrans2 := w2.Transfer(w3, 100)

	//if errTrans2 != nil {
	//	panic(errTrans2)
	//}
	fmt.Println("2nd wallet balance:", *w2)

	errDep3 := w3.DepositGas(5)

	if errDep3 != nil {
		fmt.Println("Deposit gas failed", errDep3)
	}
	fmt.Println("3rd wallet balance:", w3)
}
