package main

import "fmt"

type Node struct {
	N     int
	Left  *Node
	Right *Node
}

//	   1
// 2      3
//4  5   6  7

func bfs(node *Node) []int {
	if node == nil {
		return nil
	}

	q := []*Node{node}
	res := []int{}

	for len(q) > 0 {
		node = q[0]
		q = q[1:]

		res = append(res, node.N)

		if node.Left != nil {
			q = append(q, node.Left)
		}

		if node.Right != nil {
			q = append(q, node.Right)
		}
	}
	return res
}

func main() {
	n := &Node{
		N: 1,
		Left: &Node{
			N: 2,
			Left: &Node{
				N: 4,
			},
			Right: &Node{
				N: 5,
			},
		},
		Right: &Node{
			N: 3,
			Left: &Node{
				N: 6,
			},
			Right: &Node{
				N: 7,
			},
		},
	}
	fmt.Println(bfs(n))
}
